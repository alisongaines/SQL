# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL.

CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL )



/* Who are the top ten artists based on popularity? */

SELECT artist_name, avg(popularity) FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY avg(popularity) DESC LIMIT 10;

/* What are the top ten songs based on popularity? */

SELECT track_name, popularity FROM BIT_DB.Spotifydata
ORDER BY popularity DESC LIMIT 10;

/* Which artists have more than 3 songs in the Top 50 list? */

SELECT artist_name, COUNT(track_name) AS total_songs_on_list
FROM BIT_DB.Spotifydata
GROUP BY artist_name
HAVING total_songs_on_list >2;

/* What are the top most popular songs? What is the average danceability of the most popular songs? */

SELECT track_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC LIMIT 15;

SELECT SUM(danceability)/12 as avg_danceability
FROM BIT_DB.Spotifydata
WHERE popularity IN (SELECT popularity FROM BIT_DB.Spotifydata ORDER BY popularity DESC LIMIT 12);

/* How many of the top 50 songs have high energy, average energy, and low energy? */

SELECT MAX(energy)
FROM BIT_DB.Spotifydata;

SELECT AVG(energy)
FROM BIT_DB.Spotifydata;
 
SELECT MIN(energy)
FROM BIT_DB.Spotifydata;

SELECT COUNT(energy),
CASE 
    WHEN energy > 0.700 THEN 'high_energy'
    WHEN energy > 0.600 THEN 'avg_energy'
ELSE 'low_energy'
END AS AvgEnergy
FROM BIT_DB.Spotifydata
GROUP BY AvgEnergy
ORDER BY COUNT(energy);
